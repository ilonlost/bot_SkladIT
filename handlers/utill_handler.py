from datetime import datetime
from io import BytesIO
import qrcode


def add_write_off(bot, conn, message):
    msg = bot.send_message(message.chat.id,
                           "üîç *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (–∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å):*",
                           parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_write_off_equipment_name(bot, conn, m))


def process_write_off_equipment_name(bot, conn, message):
    equipment_name = message.text.strip()
    cursor = conn.cursor()


    query = "SELECT id, name, quantity FROM Equipment WHERE name LIKE ?"
    cursor.execute(query, ('%' + equipment_name + '%',))
    equipment = cursor.fetchall()

    if equipment:

        response = "üì¶ *–ù–∞–π–¥–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:*\n\n"
        for row in equipment:
            response += (
                f"üîç *ID:* {row.id}\n"
                f"üõ† *–ù–∞–∑–≤–∞–Ω–∏–µ:* {row.name}\n"
                f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {row.quantity}\n"
                f"{'-' * 30}\n"
            )
        msg = bot.send_message(
            message.chat.id,
            response + "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ ID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:*",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, lambda m: save_write_off(bot, conn, m,
                                                                     equipment))
    else:
        bot.send_message(message.chat.id,
                         "‚ùå *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*",
                         parse_mode='Markdown')


def save_write_off(bot, conn, message, equipment):
    equipment_id = int(message.text.strip())
    cursor = conn.cursor()


    selected_equipment = next((item for item in equipment if item[0] == equipment_id), None)

    if not selected_equipment:
        bot.send_message(message.chat.id,
                         "‚ùå *–û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*",
                         parse_mode='Markdown')
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–∏—è
    msg = bot.send_message(message.chat.id,
                           "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–∏—è:*",
                           parse_mode='Markdown')


    bot.register_next_step_handler(msg, lambda m: perform_write_off(bot, conn, m, selected_equipment, equipment_id))


def perform_write_off(bot, conn, message, selected_equipment, equipment_id):
    reason = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–∏—è
    written_off_by = message.from_user.username
    written_off_on = datetime.now()
    current_quantity = selected_equipment[2]


    query = """
    INSERT INTO WriteOffs (equipment_id, reason, written_off_by, written_off_on) 
    VALUES (?, ?, ?, ?)
    """
    cursor = conn.cursor()
    cursor.execute(query, (equipment_id, reason, written_off_by, written_off_on))


    if current_quantity > 1:
        new_quantity = current_quantity - 1
        update_query = "UPDATE Equipment SET quantity = ? WHERE id = ?"
        cursor.execute(update_query, (new_quantity, equipment_id))
    else:
        delete_query = "DELETE FROM Equipment WHERE id = ?"
        cursor.execute(delete_query, (equipment_id,))

    conn.commit()


    qr_data = f"–ü—Ä–∏—á–∏–Ω–∞: {reason}; –ö–µ–º: {written_off_by}; –ö–æ–≥–¥–∞: {written_off_on.strftime('%Y-%m-%d %H:%M')}"
    qr_code = qrcode.make(qr_data)
    img_byte_arr = BytesIO()
    qr_code.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)

    bot.send_photo(message.chat.id,
                   img_byte_arr,
                   caption="‚úÖ *–í–∞—à QR-–∫–æ–¥ –ø—Ä–∏—á–∏–Ω—ã —Å–ø–∏—Å–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:*",
                   parse_mode='Markdown')

    bot.send_message(message.chat.id,
                     "‚úÖ *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ!*",
                     parse_mode='Markdown')
