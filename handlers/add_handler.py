from io import BytesIO
from PIL import Image
from pyzbar.pyzbar import decode
import qrcode
import telebot


def return_to_main_menu(bot, message):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)


    keyboard.add(
        telebot.types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"),
        telebot.types.KeyboardButton("üîç –ü–æ–∏—Å–∫"),
        telebot.types.KeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç")
    )
    keyboard.add(
        telebot.types.KeyboardButton("üÜï –Ø—á–µ–π–∫–∞"),
        telebot.types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å"),
        telebot.types.KeyboardButton("‚ôªÔ∏è –£—Ç–∏–ª—å")
    )
    keyboard.add(
        telebot.types.KeyboardButton("üì§ –í—ã–¥–∞—Ç—å"),
        telebot.types.KeyboardButton("üì∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
    )

    bot.send_message(
        message.chat.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

def add_menu(bot, conn, message):

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    create_btn = telebot.types.KeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å")
    edit_btn = telebot.types.KeyboardButton("üõ† –ò–∑–º–µ–Ω–∏—Ç—å")
    markup.add(create_btn, edit_btn)
    bot.send_message(message.chat.id, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    bot.register_next_step_handler(message, lambda msg: handle_add_action(bot, conn, msg))

def handle_add_action(bot, conn, message):

    if message.text.strip() == "üÜï –°–æ–∑–¥–∞—Ç—å":
        add_equipment(bot, conn, message)
    elif message.text.strip() == "üõ† –ò–∑–º–µ–Ω–∏—Ç—å":
        update_equipment(bot, conn, message)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        add_menu(bot, conn, message)


def update_equipment(bot, conn, message):
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    bot.register_next_step_handler(msg, lambda m: process_qr_code_for_update(bot, conn, m))


def process_qr_code_for_update(bot, conn, message):
    if message.content_type == 'photo':
        photo = message.photo[-1].file_id
        file_info = bot.get_file(photo)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ QR-–∫–æ–¥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(BytesIO(downloaded_file))
        qr_data = decode(image)

        if qr_data:
            equipment_info = qr_data[0].data.decode('utf-8').split(';')

            if len(equipment_info) < 4:
                bot.send_message(message.chat.id, "QR-–∫–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return

            equipment_name, description, added_by, quantity = equipment_info
            bot.send_message(message.chat.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {equipment_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π):")
            bot.register_next_step_handler(message, lambda m: process_new_equipment_name(bot, conn, m, equipment_name, description, quantity))
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å QR-–∫–æ–¥.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞.")


def process_new_equipment_name(bot, conn, message, old_name, old_description, old_quantity):
    new_name = message.text
    new_name = new_name if new_name.strip() else old_name

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π):")
    bot.register_next_step_handler(msg, lambda m: process_new_equipment_quantity(bot, conn, m, new_name, old_description, old_quantity))


def process_new_equipment_quantity(bot, conn, message, new_name, old_description, old_quantity):
    new_description = message.text
    new_description = new_description if new_description.strip() else old_description

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    bot.register_next_step_handler(msg, lambda m: save_updated_equipment(bot, conn, m, new_name, new_description, old_quantity))


def save_updated_equipment(bot, conn, message, new_name, new_description, old_quantity):
    try:
        new_quantity = int(message.text)

        cursor = conn.cursor()
        query = "UPDATE Equipment SET name = ?, description = ?, quantity = ? WHERE name = ? AND quantity = ?"
        cursor.execute(query, (new_name, new_description, new_quantity, new_name, old_quantity))
        conn.commit()

        bot.send_message(message.chat.id, "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {str(e)}")
        return_to_main_menu(bot, message)



def add_equipment(bot, conn, message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, lambda m: process_equipment_name(bot, conn, m))

def process_equipment_name(bot, conn, message):
    equipment_name = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    bot.register_next_step_handler(msg, lambda m: process_equipment_quantity(bot, conn, m, equipment_name))

def process_equipment_quantity(bot, conn, message, equipment_name):
    description = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    bot.register_next_step_handler(msg, lambda m: save_equipment(bot, conn, m, equipment_name, description))

def save_equipment(bot, conn, message, equipment_name, description):
    try:
        quantity = int(message.text)
        added_by = message.from_user.username
        cursor = conn.cursor()
        query = "INSERT INTO Equipment (name, description, quantity, added_by) VALUES (?, ?, ?, ?)"
        cursor.execute(query, (equipment_name, description, quantity, added_by))
        conn.commit()


        qr_data = f"{equipment_name};{description};{added_by};{quantity}"
        qr_code = qrcode.make(qr_data)
        img_byte_arr = BytesIO()
        qr_code.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)


        bot.send_photo(message.chat.id, img_byte_arr, caption="–í–∞—à QR-–∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:")


        msg = bot.send_message(message.chat.id,
                               "–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —è—á–µ–π–∫–∏, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å —ç—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler(msg, lambda m: handle_qr_cell_scan(bot, conn, m))
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {str(e)}")
        return_to_main_menu(bot, message)


def handle_qr_cell_scan(bot, conn, message):
    if message.content_type == 'photo':
        photo = message.photo[-1].file_id
        file_info = bot.get_file(photo)
        downloaded_file = bot.download_file(file_info.file_path)


        image = Image.open(BytesIO(downloaded_file))
        qr_data = decode(image)

        if qr_data:
            cell_info = qr_data[0].data.decode('utf-8')
            cell_number = cell_info.strip()
            associate_equipment_to_cell(bot, conn, message.chat.id, cell_number)
        else:
            bot.send_message(message.chat.id, "QR-–∫–æ–¥ —è—á–µ–π–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞ —è—á–µ–π–∫–∏.")
        return_to_main_menu(bot, message)
def get_last_equipment_id(conn):
    cursor = conn.cursor()
    query = "SELECT MAX(id) FROM Equipment"
    cursor.execute(query)
    result = cursor.fetchone()
    return result[0] if result[0] else None
def associate_equipment_to_cell(bot, conn, chat_id, cell_number, message):
    cursor = conn.cursor()


    query = "SELECT id FROM Cells WHERE cell_number = ?"
    cursor.execute(query, (cell_number,))
    cell = cursor.fetchone()

    if cell:
        equipment_id = get_last_equipment_id(conn)

        query = "INSERT INTO Equipment_Cell (equipment_id, cell_id) VALUES (?, ?)"
        cursor.execute(query, (equipment_id, cell[0]))
        conn.commit()
        bot.send_message(chat_id, "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —è—á–µ–π–∫–µ.")
        return_to_main_menu(bot, message)
    else:
        bot.send_message(chat_id, "–Ø—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return_to_main_menu(bot, message)
